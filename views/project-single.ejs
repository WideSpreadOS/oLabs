<style>
    .drag-container {
        width: 82vw;
        background-color: #bcbcbc41;
        margin-inline: auto;
        padding: 2rem;
        padding-top: 4rem;
        margin-top: 2rem;
        margin-bottom: 10rem;
        border-radius: 1rem;
        backdrop-filter: blur(2px);
        border: solid 2px #fff;
        box-shadow: 0 30px 50px #00000071, inset 0 0 50px #3399cc38;
            padding: 1rem;
    padding-top: 2rem;

    }
    .draggable {
        background-color: #efefef;
        background-color: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(4px);
        margin-bottom: 2rem;
        cursor: grab;
        position: relative;
        border-radius: 1rem;
        padding: 1rem;
        border: solid 2px transparent;

    }
    .draggable h6 {
        padding: 0.25rem;
        margin-bottom: 0.5rem;
        font-size: 1.5rem;
        font-weight: bold;
        border-bottom: solid 1px #ccc;
    }
    .note-created {
        font-size: 0.75rem;
        color: #aaa;
        text-shadow: 0 1px 1px #00000088;
        margin-top: 10px;
        text-align: right;
        margin-bottom: 2rem;
    }
    .dragging {
        opacity: 0.25;
    }
    .draggable[data-complete="true"] {
        border: solid 2px orangered;
    }
    .draggable[data-complete="true"]::after {
        content: 'DONE';    
        position: absolute;
        top: -10px;
        right: -20px;
        width: 80px;
        height: 20px;;
        background-color: orangered;
        font-weight: bold;
        padding: 3px;
        border-radius: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
    }
    .toggle-complete {
        position: absolute;
        right: -10px;
        bottom: -10px;
        width: 40px;
        height: 40px;
        background-color: #3399cc;
        padding: 0.5rem;
        border-radius: 1rem;
    }

    .task-actions {
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }
    .edit-button, .completed-button {
        text-align: center;
        padding: 1rem;
        border-radius: 1rem;
        margin-top: 1rem;
    }
    .edit-button {
        background-color: orangered;
    }
    .completed-button, .uncheck-task-button {
        background-color: #9fe481;
    }
    .uncheck-task-button {
        text-align: center;
        padding: 1rem;
        border-radius: 1rem;
        margin-top: 1rem;
        color: #fff;
        font-weight: bold;
        font-size: 1.25rem;
    }
    .edit-button span, .completed-button span {
        pointer-events: none;
        color: #fff;
        font-weight: bold;
        font-size: 1.25rem;
    }
    .edit-form form {
        width: 100%;
        max-width: 100%;
        margin-top: 1rem;
        align-items: flex-end;
    }
    .edit-form button {
        width: 100%;
    }
    .delete-button {
        background-color: orangered;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        border-radius: 1rem;
        font-weight: bold;
        font-size: 1.5rem;
        width: 150px;
        max-width: 40%;
    }
    .delete-button p {
        color: #fff;
    }
    .create-task h6 {
        font-size: 1.8rem;
        color: #3399cc;
    }
</style>

<div id="nav">
    <a href="/">Home</a>
    <a href="/company/projects" class="active-link">Projects</a>
    <a href="/company/inventory">Inventory</a>
    <a href="/company/resources">Resources</a>
    <a href="/company/notes">Notes</a>
</div>

<div class="page-header">
    <h3>Project</h3>
    <h1><%= project.title %></h1>
</div>

<section>

    <div class="create-task">
        <form action="/company/projects/view/single/<%= project.id %>/tasks/add" method="post">
            <h6>Create Task</h6>
            <input type="text" name="title" id="taskTitle" placeholder="Title">
            <textarea name="description" id="taskDescription" placeholder="Description..."></textarea>
            <button type="submit">Add</button>
        </form>
    </div>

    <div class="section-header">
        <h3>Task List</h3>
    </div>

    <div class="drag-container">
        <% if (project.tasks.length <= 0) { %>
            <p style="text-align: center; padding-bottom: 1rem;">You haven't added any tasks yet.</p>
        <% } else { %>
        <% project.tasks.forEach(function(task) { %>
            <% if (task.complete == true) { %>
                <div class="draggable" data-complete="true" draggable="true" data-project-id="<%= project.id %>" data-task-id="<%= task.id %>">
            <% } else { %>
                <div class="draggable" data-complete="false" draggable="true" data-project-id="<%= project.id %>" data-task-id="<%= task.id %>">
            <% } %>

                <h6><%= task.title %></h6>
                <p><%= task.description %></p>
                <p class="note-created">Created: <%= task.lifecycle.created.toDateString() %></p>
                <div class="task-actions">
                    <div class="edit-button">
                        <span>Edit</span>
                    </div>
                    <div class="task-status">

                        <div class="completed-button">
                            <span>Compelete</span>
                        </div>
                        <div class="uncheck-task-button hidden">
                            <p>Re-Open</p>
                        </div>
                    </div>
                </div>

                <div class="edit-form hidden">
                    <form action="/company/projects/view/single/<%= project.id %>/tasks/edit/<%= task.id %>?_method=PATCH" method="post">
                        <input type="text" name="title" id="taskTitle" placeholder="Title" value="<%= task.title %>">
                        <textarea name="description" id="taskDescription" placeholder="Description..."><%= task.description %></textarea>
                        <button type="submit">Update</button>
                    </form>

                    
                    <div class="delete-button">
                        <p>Delete</p>
                    </div>

                </div>
                
            </div>
            
            <% }) %>
            
            
            
            
            
        </div>
        <% } %>





    </div>
    
</section>


<div class="logo-container">
    <img src="/images/system/olabs_logo_1a1a1a.png" alt="oLabs Logo">
</div>

<script>
    const
        draggables = document.querySelectorAll('.draggable'),
        dragContainer = document.querySelector('.drag-container')

    draggables.forEach(draggable => {

        draggable.addEventListener('dragstart', e => {
            console.log(e)
            draggable.classList.add('dragging')
        })

        draggable.addEventListener('dragend', e => {
            console.log(e)
            draggable.classList.remove('dragging')
        })
        
        const 
            editBtn = draggable.querySelector('.edit-button'),
            editForm = draggable.querySelector('.edit-form'),
            completedBtn = draggable.querySelector('.completed-button'),
            deleteBtn = draggable.querySelector('.delete-button'),
            projectId = draggable.getAttribute('data-project-id'),
            taskId = draggable.getAttribute('data-task-id'),
            uncheckTaskBtn = draggable.querySelector('.uncheck-task-button')
        
            const checkComplete = draggable.getAttribute('data-complete')
            if (checkComplete === 'true') {
                console.log('THIS TASK IS COMPLETE')
                uncheckTaskBtn.classList.remove('hidden')
                completedBtn.classList.add('hidden')
            } else {
                uncheckTaskBtn.classList.add('hidden')
            }
        editBtn.addEventListener('click', e => {
            const checkComplete = draggable.getAttribute('data-complete')

            console.log('checkComplete')
            console.log(checkComplete)
            editForm.classList.toggle('hidden')
            if (editForm.classList.contains('hidden')) {
                console.log('editBtn if(editForm.classList.contains(hidden)) {YOU ARE HERE > }', draggable)
                editBtn.querySelector('span').innerText = 'Edit'
                e.target.style.backgroundColor = 'orangered'
                if (checkComplete === 'true') {
                    console.log('checkComplete === true: ', checkComplete)
                    uncheckTaskBtn.classList.remove('hidden')
                    completedBtn.classList.add('hidden')
                } else if (checkComplete === 'false') {
                    completedBtn.classList.remove('hidden')
                    uncheckTaskBtn.classList.add('hidden')
                }
            } else {
                editBtn.querySelector('span').innerText = 'Cancel'
                e.target.style.backgroundColor = 'orangered'
                completedBtn.classList.add('hidden')
                uncheckTaskBtn.classList.add('hidden')
            }
        })

        completedBtn.addEventListener('click', e => {
            draggable.setAttribute('data-complete', 'true')
            uncheckTaskBtn.classList.remove('hidden')
            completedBtn.classList.add('hidden')
            const update = {
                complete: true
            }

            const options = {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(update),
            }

            const url = 'http://www.olabs.herokuapp.com/company/projects/view/single/' + projectId + '/tasks/status/' + taskId
            console.log('url: ', url)
            fetch(url, options)
                .then(data => {
                    if (!data.ok) {
                        throw Error(data.status)
                    }
                    return data.json()
                }).then(update => {
                    console.log(update)
                }).catch(e => {
                    console.log(e);
                })

        })
        uncheckTaskBtn.addEventListener('click', e => {
            draggable.setAttribute('data-complete', 'false')
            uncheckTaskBtn.classList.add('hidden')
            completedBtn.classList.remove('hidden')
            const update = {
                complete: false
            }

            const options = {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(update),
            }

            const url = 'http://www.olabs.herokuapp.com/company/projects/view/single/' + projectId + '/tasks/status/' + taskId
            console.log('url: ', url)
            fetch(url, options)
                .then(data => {
                    if (!data.ok) {
                        throw Error(data.status)
                    }
                    return data.json()
                }).then(update => {
                    console.log(update)
                }).catch(e => {
                    console.log(e);
                })
        })



        deleteBtn.addEventListener('click', e => {
            draggable.classList.add('hidden')
            const
                url = 'http://www.olabs.herokuapp.com/company/projects/view/single/' + projectId + '/tasks/' + taskId + '/delete'
            
            fetch(url, {
                method: 'DELETE'
            }).then(response => {
                return response.json()
            }).then(data =>
                console.log(data)
            );
        })

    })

    dragContainer.addEventListener('dragover', e => {
        e.preventDefault()
        const afterElement = getDragAfterElement(dragContainer, e.clientY)
        // console.log(afterElement)
        const draggable = document.querySelector('.dragging')
        if (afterElement == null) {
            dragContainer.appendChild(draggable)
        } else {
            dragContainer.insertBefore(draggable, afterElement)
        }
    })

    function getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')]
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect()
            const offset = y - box.top - box.height / 2
            // console.log(offset)
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child }
            } else {
                return closest
            }

        }, {offset: Number.NEGATIVE_INFINITY}).element
    }
</script>