<style>
    .drag-container {
        width: 82vw;
        background-color: #bcbcbc41;
        margin-inline: auto;
        padding: 2rem;
        padding-top: 4rem;
        margin-top: 2rem;
        margin-bottom: 10rem;
        border-radius: 1rem;
        backdrop-filter: blur(2px);
        border: solid 2px #fff;
        box-shadow: 0 30px 50px #00000071, inset 0 0 50px #3399cc38;
            padding: 1rem;
    padding-top: 2rem;

    }
    .draggable {
        background-color: #efefef;
        background-color: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(4px);
        margin-bottom: 2rem;
        cursor: grab;
        position: relative;
        border-radius: 1rem;
        padding: 1rem;
        border: solid 2px transparent;
    }

    .dragging {
        opacity: 0.25;
    }
    .draggable[data-complete="true"] {
        border: solid 2px orangered;
    }
    .draggable[data-complete="true"]::after {
        content: 'DONE';    
        position: absolute;
        top: -10px;
        right: -20px;
        width: 80px;
        height: 20px;;
        background-color: orangered;
        font-weight: bold;
        padding: 3px;
        border-radius: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
    }
    .toggle-complete {
        position: absolute;
        right: -10px;
        bottom: -10px;
        width: 40px;
        height: 40px;
        background-color: #3399cc;
        padding: 0.5rem;
        border-radius: 1rem;
    }
    .edit-button {
        background-color: #9fe481;
        text-align: center;
        padding: 0.5rem;
        border-radius: 1rem;
        margin-top: 1rem;

    }
    .edit-button span {
        pointer-events: none;
        color: #fff;
        font-weight: bold;
    }

    .create-task h6 {
        font-size: 1.8rem;
        color: #3399cc;
    }
</style>

<div id="nav">
    <a href="/">Home</a>
    <a href="/company/projects" class="active-link">Projects</a>
    <a href="/company/inventory">Inventory</a>
    <a href="/company/resources">Resources</a>
    <a href="/company/notes">Notes</a>
</div>

<div class="page-header">
    <h3>Project</h3>
    <h1><%= project.title %></h1>
    <h6 style="text-align: center; margin-bottom: 50px; margin-top: 25px;">Project ID: <%= project.id %></h6>
</div>

<section>

    <div class="create-task">
        <form action="/company/projects/view/single/<%= project.id %>/tasks/add" method="post">
            <h6>Create Task</h6>
            <input type="text" name="title" id="taskTitle" placeholder="Title">
            <textarea name="description" id="taskDescription" placeholder="Description..."></textarea>
            <button type="submit">Add</button>
        </form>
    </div>

    <div class="section-header">
        <h3>Task List</h3>
    </div>

    <div class="drag-container">
        <% project.tasks.forEach(function(task) { %>
            <% if (task.complete == true) { %>
                <div class="draggable" data-complete="true" draggable="true">
            <% } else { %>
                <div class="draggable" data-complete="false" draggable="true">
            <% } %>

                <h6><%= task.title %></h6>
                <p><%= task.description %></p>
                <p>Created: <%= task.lifecycle.created.toDateString() %></p>
                <div class="edit-button">
                    <span>Edit</span>
                </div>

                <div class="edit-form hidden">
                    <form action="/company/projects/view/single/<%= project.id %>/tasks/edit/<%= task.id %>?_method=PATCH" method="post">
                        <input type="text" name="title" id="taskTitle" placeholder="Title" value="<%= task.title %>">
                        <textarea name="description" id="taskDescription" placeholder="Description..."><%= task.description %></textarea>
                        <button type="submit">Update</button>
                    </form>

                    <form action="/company/projects/view/single/<%=project.id %>/tasks/<%= task.id %>/delete" method="post">
                        <button class="delete-button" type="submit">Delete</button>
                    </form>
                </div>

            </div>

        <% }) %>





    </div>

</section>


<div class="logo-container">
    <img src="/images/system/olabs_logo_1a1a1a.png" alt="oLabs Logo">
</div>

<script>
    const
        draggables = document.querySelectorAll('.draggable'),
        dragContainer = document.querySelector('.drag-container')

    draggables.forEach(draggable => {

        draggable.addEventListener('dragstart', e => {
            console.log(e)
            draggable.classList.add('dragging')
        })

        draggable.addEventListener('dragend', e => {
            console.log(e)
            draggable.classList.remove('dragging')
        })
        
        const 
            editBtn = draggable.querySelector('.edit-button'),
            editForm = draggable.querySelector('.edit-form')
        
        editBtn.addEventListener('click', e => {
            editForm.classList.toggle('hidden')
            if (editForm.classList.contains('hidden')) {
                editBtn.querySelector('span').innerText = 'Edit'
                e.target.style.backgroundColor = '#9fe481'
            } else {
                editBtn.querySelector('span').innerText = 'Cancel'
                e.target.style.backgroundColor = 'orangered'
            }
        })

    })

    dragContainer.addEventListener('dragover', e => {
        e.preventDefault()
        const afterElement = getDragAfterElement(dragContainer, e.clientY)
        // console.log(afterElement)
        const draggable = document.querySelector('.dragging')
        if (afterElement == null) {
            dragContainer.appendChild(draggable)
        } else {
            dragContainer.insertBefore(draggable, afterElement)
        }
    })

    function getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')]
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect()
            const offset = y - box.top - box.height / 2
            // console.log(offset)
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child }
            } else {
                return closest
            }

        }, {offset: Number.NEGATIVE_INFINITY}).element
    }
</script>